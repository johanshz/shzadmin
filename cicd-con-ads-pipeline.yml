##################################################################################################
#  ____                     _                     ____                      _ _   _              #
# |  _ \ _ __ ___ _ __ ___ (_)_   _ _ __ ___     / ___|___  _ __  ___ _   _| | |_(_)_ __   __ _  #
# | |_) | '__/ _ \ '_ ` _ \| | | | | '_ ` _ \   | |   / _ \| '_ \/ __| | | | | __| | '_ \ / _` | #
# |  __/| | |  __/ | | | | | | |_| | | | | | |  | |__| (_) | | | \__ \ |_| | | |_| | | | | (_| | #
# |_|   |_|  \___|_| |_| |_|_|\__,_|_| |_| |_|   \____\___/|_| |_|___/\__,_|_|\__|_|_| |_|\__, | #
#                                                                                         |___/  #
##################################################################################################
# 
# https://www.premiumconsulting.com.co
# Tool: Azure DevOps Services
# Description: Pipeline Template for CI/CD
# Component: Metamodelo Homologation
# Proyect: WSPR56-ServiciosIntegracion
#
##################################################################################################

# Build name format
name: 1.0.$(Date:yyyyMMdd)$(Rev:.rr)

# CI trigger configuration
trigger: 
  branches:
    include:
      - $(Build.SourceBranchName)
  paths:
    include:
      - '*'
    exclude:
      - cicd-con-ads-pipeline.yml
      
# Agent pool configuration
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
  - repository: templates
    type: git
    name: ADS_CICD_Templates/CICD_Kubernetes
    ref: prod

stages:
- template: Docker/Graddle/ci-graddle-docker-ads-pipeline.yml@templates
  parameters:
    vmImage: 'ubuntu-latest'
    displayNameStage: 'Build Docker Image Metamodelo'
    displayNameJob: 'Build Metamodelo Homologation'
    containerRegistry: $(AZ_ACR_CONNECTION)
    crRepository: '$(CORE_PJPREFIX)-$(CORE_STAGE)-$(CORE_CUSTOMNAME)-ci'
    chartPath: 'charts/parametrization'
    path2artifacts: '$(Build.ArtifactStagingDirectory)/$(CORE_CUSTOMNAME)'
    artifactName: $(Build.BuildNumber)

- template: Helm/cd-helm-ads-pipeline.yml@templates
  parameters:
    poolName: 'AZDEPLOY'
    displayNameStage: 'Deploy Image to Kubernetes Metamodelo'
    displayNameJob: 'Deploy Image Metamodelo Homologation'
    artifactName: $(Build.BuildNumber)
    env: 'env-$(ADS_ENVIROMENT)-con-$(CORE_NAMESPACE)'
    namespace: '$(CORE_PJPREFIX)-$(CORE_STAGE)-$(CORE_NAMESPACE)-cicd'
    chartPath: '$(Pipeline.Workspace)/$(Build.BuildNumber)'
    releaseName: '$(CORE_PJPREFIX)-$(CORE_STAGE)-$(CORE_CUSTOMNAME)'
    valueFile: '$(Pipeline.Workspace)/$(Build.BuildNumber)/values.yaml'
    overrideValues: 'ingress.enabled=false,image.repository=$(AZ_ACR_NAME).azurecr.io/$(CORE_PJPREFIX)-$(CORE_STAGE)-$(CORE_CUSTOMNAME)-ci,image.tag=$(Build.BuildNumber),spring.data.mongodb.uri="$(spring_data_mongodb_uri)",spring.kafka.topic=$(spring_kafka_topic),spring.kafka.securityProtocol=$(spring_kafka_securityProtocol),spring.kafka.saslMechanism=$(spring_kafka_saslMechanism),spring.kafka.bootstrapServers=$(spring_kafka_bootstrapServers),spring.kafka.levelLog=$(spring_kafka_levelLog),spring.kafka.serviceName=$(spring_kafka_serviceName),spring.kafka.saslJaasConfig="$(spring_kafka_saslJaasConfig)",adapter.restconsumer.timeout=$(adapter_restconsumer_timeout),adapter.restconsumer.url=$(adapter_restconsumer_url)'